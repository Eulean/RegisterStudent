// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentRegisteration.Data;

#nullable disable

namespace StudentRegisteration.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240325081939_NewInitial")]
    partial class NewInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentRegisteration.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentDetailsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentDetailsId")
                        .IsUnique()
                        .HasFilter("[StudentDetailsId] IS NOT NULL");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("StudentRegisteration.Models.CourseOffering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseOfferings");
                });

            modelBuilder.Entity("StudentRegisteration.Models.Registeration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseOfferingId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentDetailsId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseOfferingId");

                    b.HasIndex("StudentDetailsId");

                    b.ToTable("Registerations");
                });

            modelBuilder.Entity("StudentRegisteration.Models.StudentDetails", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("StudentDetails");
                });

            modelBuilder.Entity("StudentRegisteration.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudentRegisteration.Models.Address", b =>
                {
                    b.HasOne("StudentRegisteration.Models.StudentDetails", "StudentDetails")
                        .WithOne("Address")
                        .HasForeignKey("StudentRegisteration.Models.Address", "StudentDetailsId");

                    b.Navigation("StudentDetails");
                });

            modelBuilder.Entity("StudentRegisteration.Models.Registeration", b =>
                {
                    b.HasOne("StudentRegisteration.Models.CourseOffering", "CourseOffering")
                        .WithMany("Registerations")
                        .HasForeignKey("CourseOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegisteration.Models.StudentDetails", "studentDetails")
                        .WithMany("Registerations")
                        .HasForeignKey("StudentDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseOffering");

                    b.Navigation("studentDetails");
                });

            modelBuilder.Entity("StudentRegisteration.Models.StudentDetails", b =>
                {
                    b.HasOne("StudentRegisteration.Models.User", "User")
                        .WithOne("StudentDetails")
                        .HasForeignKey("StudentRegisteration.Models.StudentDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentRegisteration.Models.CourseOffering", b =>
                {
                    b.Navigation("Registerations");
                });

            modelBuilder.Entity("StudentRegisteration.Models.StudentDetails", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Registerations");
                });

            modelBuilder.Entity("StudentRegisteration.Models.User", b =>
                {
                    b.Navigation("StudentDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
